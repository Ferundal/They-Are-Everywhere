//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/CannonController/CannonController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CannonController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CannonController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CannonController"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""1c5d45e9-579d-484c-a23d-745717938b49"",
            ""actions"": [
                {
                    ""name"": ""Up/Down Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""6719ab1f-6efd-4e9b-937e-bc3de86ac55a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left/Right Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""d452d728-7d7d-46b3-a40b-9777573561db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""dde54a01-9f08-4adb-9631-83afcb22c0c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d967e2bc-9f1d-40a8-9e47-c94e550413f2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""6ec4095b-250c-47c7-960a-96c9b956f91a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up/Down Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""18090994-960e-4770-a886-767f228992bc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up/Down Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9e151588-c0e0-4cfe-acf9-e142e02be475"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up/Down Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""2980e291-7779-4635-a756-6453daf91788"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left/Right Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""22ca7d19-71ff-428e-86ea-27c70099401e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left/Right Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ba871596-e01b-4d3f-aec9-07aaadece3e6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left/Right Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""08482425-fddc-4f25-ae1d-a4ee887ca7c9"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d7bdf84f-95c5-4fd6-999b-a2bd4686b0f1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0b8f426a-7532-4612-bf31-b866da53ae56"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fa52751d-1960-4105-99b3-7151ced69a3e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0f3929b9-7140-4c38-896f-d698c43abe40"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""189282b7-9f66-49f0-84ad-8dd3b3fe5a5f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_UpDownRotation = m_Movement.FindAction("Up/Down Rotation", throwIfNotFound: true);
        m_Movement_LeftRightRotation = m_Movement.FindAction("Left/Right Rotation", throwIfNotFound: true);
        m_Movement_Shoot = m_Movement.FindAction("Shoot", throwIfNotFound: true);
        m_Movement_Rotation = m_Movement.FindAction("Rotation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_UpDownRotation;
    private readonly InputAction m_Movement_LeftRightRotation;
    private readonly InputAction m_Movement_Shoot;
    private readonly InputAction m_Movement_Rotation;
    public struct MovementActions
    {
        private @CannonController m_Wrapper;
        public MovementActions(@CannonController wrapper) { m_Wrapper = wrapper; }
        public InputAction @UpDownRotation => m_Wrapper.m_Movement_UpDownRotation;
        public InputAction @LeftRightRotation => m_Wrapper.m_Movement_LeftRightRotation;
        public InputAction @Shoot => m_Wrapper.m_Movement_Shoot;
        public InputAction @Rotation => m_Wrapper.m_Movement_Rotation;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @UpDownRotation.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnUpDownRotation;
                @UpDownRotation.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnUpDownRotation;
                @UpDownRotation.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnUpDownRotation;
                @LeftRightRotation.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnLeftRightRotation;
                @LeftRightRotation.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnLeftRightRotation;
                @LeftRightRotation.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnLeftRightRotation;
                @Shoot.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnShoot;
                @Rotation.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnRotation;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @UpDownRotation.started += instance.OnUpDownRotation;
                @UpDownRotation.performed += instance.OnUpDownRotation;
                @UpDownRotation.canceled += instance.OnUpDownRotation;
                @LeftRightRotation.started += instance.OnLeftRightRotation;
                @LeftRightRotation.performed += instance.OnLeftRightRotation;
                @LeftRightRotation.canceled += instance.OnLeftRightRotation;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);
    public interface IMovementActions
    {
        void OnUpDownRotation(InputAction.CallbackContext context);
        void OnLeftRightRotation(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
    }
}
